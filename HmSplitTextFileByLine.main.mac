/*
 * HmSplitTextFileByLine v1.0.5.3
 *
 * Copyright (c) 2024 Akitsugu Komiyama
 * under the MIT License
 */

hidemaruversion "9.25.99";

jsmode "WebView2";
js {

class HmSplitTextFileByLineMain {
    constructor() {
        HmSplitTextFileByLineMain.throwIfNotFileName();
        // 何行に分割するかを得る
        let [linesPerChunk, needConfirm] = this.getPerChunk();
        // 現在のテキストを取得
        const text = hidemaru.getTotalText();
        // テキストを分割して配列に格納
        const chunks = this.splitText(text, linesPerChunk);
        if (needConfirm) {
            // 最後の実行確認
            if (this.confirmExecution(chunks.length + "個のファイルに分割しますか？") == false) {
                HmSplitTextFileByLineMain.throwCancelException();
            }
        }
        // 分割したテキストを分割してファイルに保存
        this.saveChunksToFiles(chunks);
        HmSplitTextFileByLineMain.outputAlert(chunks.length + "個のファイルに分割しました。");
    }
    static outputAlert(err) {
        let dll = loaddll("HmOutputPane.dll");
        dll.dllFunc.Output(hidemaru.getCurrentWindowHandle(), err + "\r\n");
    }
    static throwIfNotFileName() {
        // ファイル名無しは対象にしない
        if (!hidemaru.getFileFullPath()) {
            HmSplitTextFileByLineMain.outputAlert("ファイル名が付いているファイルのみ対象とします。");
            HmSplitTextFileByLineMain.throwCancelException();
        }
    }
    static throwCancelException() {
        throw "実行をキャンセルしました。";
    }
    getPerChunk() {
        // このマクロの引数として行数が指定されている。
        let answer = getarg(0);
        let needConfirm = true;
        if (answer != "") {
            needConfirm = false;
        }
        // 何も指定がないなら、ここで簡易インターフェイスで入力
        if (answer == "") {
            answer = input("何行でファイルを分割しますか？");
        }
        if (answer == "") {
            HmSplitTextFileByLineMain.throwCancelException();
        }
        try {
            let linesPerChunk = 5000;
            linesPerChunk = Number(answer);
            if (Number.isNaN(linesPerChunk)) {
                HmSplitTextFileByLineMain.throwCancelException();
            }
            if (linesPerChunk <= 0) {
                HmSplitTextFileByLineMain.throwCancelException();
            }
            return [linesPerChunk, needConfirm];
        }
        catch (err) {
            HmSplitTextFileByLineMain.throwCancelException();
        }
    }
    // 対象のテキストを該当の行数で割って配列にして返す
    splitText(text, linesPerChunk) {
        const chunks = [];
        const textArray = text.split('\n');
        for (let i = 0; i < textArray.length; i += linesPerChunk) {
            chunks.push(textArray.slice(i, i + linesPerChunk).join('\n'));
        }
        // chunksの最後の要素が""になってしまっていたら、それは連番ファイルとして保存しても無意味なので、カット
        if (chunks.length >= 2) {
            if (chunks[chunks.length - 1] === "") {
                chunks.pop();
            }
        }
        return chunks;
    }
    // ファイルのフルパスから 「拡張子」と「それ以外」を得る。「拡張子」が無い場合にも対応する
    getFilePathInfo(filePath) {
        // ファイル名のみを取得する
        let fileName = filePath.split("\\").pop();
        // ファイル名を "." で分割して拡張子とそれ以外に分ける
        let dotIndex = fileName.lastIndexOf(".");
        let name = dotIndex !== -1 ? fileName.substring(0, dotIndex) : fileName;
        let ext = dotIndex !== -1 ? fileName.substring(dotIndex + 1) : "";
        return {
            name: name,
            ext: ext
        };
    }
    saveChunksToFiles(chunks) {
        let cp = codepage();
        let hasbom = bom();
        function getTargetEncode() {
            switch (cp) {
                case 932: return "sjis";
                case 1200: return "utf16";
                case 65001: return hasbom ? "utf8bom" : "utf8";
            }
            return "utf8";
        }
        let fname = hidemaru.getFileFullPath();
        let enc = getTargetEncode();
        let maxFormatLength = chunks.length.toString().length;
        for (let i = 0; i < chunks.length; i++) {
            let pathAttr = this.getFilePathInfo(fname);
            // 配列の個数を文字列化したその文字列の長さに足りない部分を0埋めすればよい。
            // 配列の個数が30個なら、"30"という文字列の長さ、すなわち2文字。
            // 現在の数値が3なら3を文字列化して足りない文字数すなわち1つが0で埋まる
            const zeroFormatNumber = (i + 1).toString().padStart(maxFormatLength, '0');
            // ファイル名を新たに分割したファイル名に
            let newFileName = `${pathAttr.name}_${zeroFormatNumber}.${pathAttr.ext}`;
            hidemaru.saveTextFile(newFileName, chunks[i], enc);
        }
    }
    confirmExecution(text) {
        let buttonOkCancel = 0x0001;
        let dialogResult = message(text, "実行確認", buttonOkCancel);
        // キャンセル・中止・いいえ などなら false
        // (少々 messageダイアログのボタンタイプを変更してもいいようにここで柔らかく対応しておく)
        if (dialogResult == 2 || dialogResult == 3 || dialogResult == 7) {
            return false;
        }
        return true;
    }
}
try {
    let objHmSplitTextFileByLineMain = new HmSplitTextFileByLineMain();
}
catch (err) {
    HmSplitTextFileByLineMain.outputAlert(err);
}


} // js