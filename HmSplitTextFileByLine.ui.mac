/*
 * HmSplitTextFileByLine v1.0.5.8
 *
 * Copyright (c) 2024 Akitsugu Komiyama
 * under the MIT License
 */

hidemaruversion "9.25.99";

// これを「秀丸マクロの層」で入れて表示だけでもしておかないと、JSからキックしたら１秒ほど遅くなってしまう。
// NeedConfirm(=マクロ引数が無い)である時だけ出す。ここで記述したくはないがあまりにも速度が違うので仕方がない。
if (filename2 != "" && getarg(0) == "") {
    renderpanecommand
    """"""""""""""""""""""""""""""""""""""""
    {
        "target": "HmSplitTextFileByLine",
        "show": 1,
        "place": "leftside",
        "size": 240
    }
    """""""""""""""""""""""""""""""""""""""";
}


jsmode "WebView2\\HmSplitTextFileByLine";

js {

if (typeof (objHmSplitTextFileByLineUI) != "undefined") {
    objHmSplitTextFileByLineUI._destructor();
}
class HmSplitTextFileByLineUI {
    static currentmacrodir = currentmacrodirectory();
    // ラベルはこのマクロ独自にしておく
    static strTargetLabel = "HmSplitTextFileByLine";
    constructor() {
        HmSplitTextFileByLineUI.throwIfNotFileName();
        HmSplitTextFileByLineUI.openRenderPane();
        HmSplitTextFileByLineUI.setItitializeInterval();
        HmSplitTextFileByLineUI.setUpdateInterval();
    }
    _destructor() {
        HmSplitTextFileByLineUI.clearInitializeInterval();
        HmSplitTextFileByLineUI.clearUpdateInterval();
    }
    static outputAlert(err) {
        let dll = loaddll("HmOutputPane.dll");
        dll.dllFunc.Output(hidemaru.getCurrentWindowHandle(), err + "\r\n");
    }
    static throwIfNotFileName() {
        // ファイル名無しは対象にしない
        if (!hidemaru.getFileFullPath()) {
            HmSplitTextFileByLineUI.outputAlert("ファイル名が付いているファイルのみ対象とします。");
            HmSplitTextFileByLineUI.throwCancelException();
        }
    }
    static throwCancelException() {
        throw "実行をキャンセルしました。";
    }
    // レンダリングペインを開く
    static openRenderPane() {
        // カレントマクロフォルダのhtmlファイルを使う
        let absoluteUrl = new URL(HmSplitTextFileByLineUI.currentmacrodir + "\\" + "HmSplitTextFileByLine.ui.html");
        let idCallback = hidemaru.getFunctionId(HmSplitTextFileByLineUI.onHtmlButtonClick);
        let params = new URLSearchParams();
        params.set('strIDCallBack', String(idCallback));
        params.set('strAllLineCount', String(linecount2()));
        absoluteUrl.search = params.toString();
        let strUrl = absoluteUrl.href; // オブジェクトから実際のUrl文字列へ
        const json_arg = {
            target: HmSplitTextFileByLineUI.strTargetLabel,
            uri: strUrl,
            show: 1,
            place: "leftside",
            size: 240,
        };
        renderpanecommand(json_arg);
    }
    static tickCheckComplete() {
        let readyState = renderpanecommand({ target: HmSplitTextFileByLineUI.strTargetLabel, get: "readyState" });
        if (readyState == "complete") {
            HmSplitTextFileByLineUI.clearInitializeInterval();
            HmSplitTextFileByLineUI.onRenderPaneShown();
        }
    }
    static tickCheckCloseRenderPane() {
        let readyState = renderpanecommand({ target: HmSplitTextFileByLineUI.strTargetLabel, get: "readyState" });
        if (readyState == "complete") {
            ;
        }
        let isShowNow = renderpanecommand({ target: HmSplitTextFileByLineUI.strTargetLabel, get: "show" });
        if (isShowNow == "0") {
            HmSplitTextFileByLineUI.clearInitializeInterval();
            HmSplitTextFileByLineUI.clearUpdateInterval();
        }
    }
    // レンダリングペインが完全に表示されたら、
    // このJS内にある「onInputHtmlButtonClick_HmSplitTextFileByLine」関数をレンダリングペインから呼び出せるように関数のIDを渡す。
    // また、「レンダリングペインを操作するのよ～」ということがわかりやすいように、レンダリングペイン側にフォーカスを移す
    static onRenderPaneShown() {
        renderpanecommand({
            target: HmSplitTextFileByLineUI.strTargetLabel,
            focus: 1,
        });
    }
    // HTML側で「ボタン」を押すと、これが呼ばれる
    static onHtmlButtonClick(json_text) {
        HmSplitTextFileByLineUI.clearUpdateInterval();
        renderpanecommand({
            target: HmSplitTextFileByLineUI.strTargetLabel,
            show: 0,
        });
        // json_textの状態で、inputフィールドに入っているテキストが渡ってくるので、その数値を渡す
        let json_obj = JSON.parse(json_text);
        let linesPerChunk = json_obj.input_1;
        hidemaru.postExecMacroFile(HmSplitTextFileByLineUI.currentmacrodir + "\\" + "HmSplitTextFileByLine.main.mac", linesPerChunk);
    }
    static idIntervalInitialize;
    static idIntervalUpdate;
    static setItitializeInterval() {
        // 最初のレンダリングペインCompleteチェック用のものは、比較的細やかにチェックする。
        HmSplitTextFileByLineUI.idIntervalInitialize = hidemaru.setInterval(HmSplitTextFileByLineUI.tickCheckComplete, 300);
    }
    static clearInitializeInterval() {
        if (typeof (HmSplitTextFileByLineUI.idIntervalInitialize) != "undefined") {
            hidemaru.clearInterval(HmSplitTextFileByLineUI.idIntervalInitialize);
        }
    }
    static setUpdateInterval() {
        // 全体の行数の変化にはおおらかに対応する。
        HmSplitTextFileByLineUI.idIntervalUpdate = hidemaru.setInterval(HmSplitTextFileByLineUI.tickCheckCloseRenderPane, 2000);
    }
    static clearUpdateInterval() {
        if (typeof (HmSplitTextFileByLineUI.idIntervalUpdate) != "undefined") {
            hidemaru.clearInterval(HmSplitTextFileByLineUI.idIntervalUpdate);
        }
    }
}
try {
    var objHmSplitTextFileByLineUI = new HmSplitTextFileByLineUI();
}
catch (err) {
    HmSplitTextFileByLineUI.outputAlert(err);
    if (typeof (objHmSplitTextFileByLineUI) != "undefined") {
        objHmSplitTextFileByLineUI._destructor();
    }
}

} // js

